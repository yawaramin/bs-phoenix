// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Phoenix from "phoenix";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

require('phoenix_html'),require('../css/app.scss')
;

function stringify(str) {
  return JSON.stringify(str, null, 2);
}

var params = {
  userToken: "",
  logger: (function (kind, msg, data) {
      console.log(kind + (": " + (msg + ", ")), JSON.stringify(data, null, 2));
      
    })
};

var socket = new Phoenix.Socket("/socket", params);

socket.connect();

var channel = socket.channel("room:lobby", undefined);

var $$document = document;

var option_msgList = $$document.getElementById("msg-list");

var name = $$document.getElementById("name");

var name$1 = (name == null) ? undefined : Caml_option.some(name);

var msg = $$document.getElementById("msg");

var msg$1 = (msg == null) ? undefined : Caml_option.some(msg);

function getValue(element) {
  var __x = Belt_Option.map(element, (function (prim) {
          return prim;
        }));
  return Belt_Option.map(__x, (function (prim) {
                return prim.value;
              }));
}

function getList(param) {
  if (!(option_msgList == null)) {
    return option_msgList;
  }
  throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "getList failed",
        Error: new Error()
      };
}

function getMsg(param) {
  if (!(msg == null)) {
    return msg;
  }
  throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "getList failed",
        Error: new Error()
      };
}

function updateMsgList(name, message) {
  var msgList = getList(undefined);
  var li = $$document.createElement("li");
  var newMessage = "<b>" + (name + ("</b>: " + message));
  li.innerHTML = newMessage;
  msgList.appendChild(li);
  getMsg(undefined).value = "";
  
}

channel.on("shout", (function (payload) {
        var name = payload.name !== "" ? payload.name : "guest";
        return updateMsgList(name, payload.message);
      }));

channel.join(undefined);

function eventHandler($$event) {
  var keyCode = $$event.key;
  var _name = getValue(name$1);
  var name$2 = _name !== "" ? _name : "guest";
  var keyCodeIsEnter = keyCode === "Enter";
  var someMessage = getValue(msg$1) !== "";
  if (keyCodeIsEnter && someMessage) {
    channel.push("shout", {
                name: name$2,
                message: getValue(msg$1)
              }, undefined).receive("ok", (function (param) {
                console.log("Created message", param);
                
              })).receive("error", (function (param) {
              console.log("Create failed", param);
              
            })).receive("timeout", (function (param) {
            console.log("Network issue");
            
          }));
    return ;
  }
  
}

if (!(msg == null)) {
  msg.addEventListener("keypress", eventHandler);
}

var $$Document;

var $$Element;

var HtmlElement;

var option_msgList$1 = (option_msgList == null) ? undefined : Caml_option.some(option_msgList);

export {
  $$Document ,
  $$Element ,
  HtmlElement ,
  stringify ,
  socket ,
  channel ,
  $$document ,
  option_msgList$1 as option_msgList,
  name$1 as name,
  msg$1 as msg,
  getValue ,
  getList ,
  getMsg ,
  updateMsgList ,
  eventHandler ,
  
}
/*  Not a pure module */
